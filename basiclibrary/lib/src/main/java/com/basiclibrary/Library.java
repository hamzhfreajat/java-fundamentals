/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.basiclibrary;

import java.util.*;

public class Library {
    public static void main(String[] args) {
        int[] testArr = {1,2,3,4,5};
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        int[] randomRoll = roll(6);
        boolean findDublicate = containsDuplicates(testArr);
        int avg = calculateAverage(testArr);
        int[] arrayOfAvg = avgArrOfArr(weeklyMonthTemperatures);


        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
        System.out.println(wetherAnalyzer(weeklyMonthTemperatures));

    }

    public static int[] roll(int n){
        int rolls[] = new int[n];

        for (int index = 0 ; index < n ; index++){
            Random rand = new Random();
            rolls[index] = rand.nextInt((6 - 1) + 1)+1;
        }

        return rolls;
    }

    public static boolean containsDuplicates(int[] arr){
        boolean flag = false;
        for (int index = 0 ; index < arr.length ; index++ ) {
            for (int j = 0 ; j < arr.length ; j++) {
                if( index != j) {
                    if(arr[j] == arr[index]){
                        flag = true;
                        break;
                    }
                }
            }
        }
        return flag;
    }

    public static int calculateAverage(int[] arr) {
        int sum = 0;
        for (int elemnt : arr
        ) {
            sum += elemnt;
        }
        return Math.floorDiv(sum, arr.length);
    }

    public static int[] avgArrOfArr(int[][] arr){
        int[] newArr = new int[arr.length];
        for (int index = 0 ; index < arr.length ; index++) {
            newArr[index] = calculateAverage(arr[index]);
        }
        return newArr;
    }

    public static String wetherAnalyzer(int[][] weeklyMonthTemperatures){
        Set<Integer> weeklyMonthTemperature = new HashSet<>();
        for (int[] temperatures:
                weeklyMonthTemperatures) {
            for (int temperature : temperatures) {
                weeklyMonthTemperature.add(temperature);
            }
        }
        int high = Collections.max(weeklyMonthTemperature);
        int low = Collections.min(weeklyMonthTemperature) ;
        String notIncTemp =  "High: " + high + "\nLow: " + low +"\n";
        for( ; low < high ; low++){
            if(!weeklyMonthTemperature.contains(low)) notIncTemp += "Never saw temperature: " + low + "\n";
        }
        return notIncTemp;
    }



    public static String tally(List<String> list){
        Map<String ,Integer> map = new HashMap<>();

        for(  String ele  : list) {
            if(  map.containsKey(ele)   ) {
                map.put(ele, map.get(ele) + 1);
            }//if
            else {
                map.put(ele, 1);
            }
        }//for
        return Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();
    }
}
